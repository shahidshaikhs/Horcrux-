(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{205:function(t,e,a){"use strict";a.r(e);var s=a(28),n=Object(s.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"data-types"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#data-types"}},[t._v("#")]),t._v(" Data Types")]),t._v(" "),a("p",[t._v("A variable in JavaScript can contain any data. A variable can at one moment be a string and at another be a number:")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// no errorlet message = "hello";')]),t._v("\nmessage "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("123456")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("Programming languages that allow such things are called “dynamically typed”, meaning that there are data types, but variables are not bound to any of them.")]),t._v(" "),a("p",[t._v("There are seven basic data types in JavaScript. Here, we’ll cover them in general and in the next chapters we’ll talk about each of them in detail.")]),t._v(" "),a("h2",{attrs:{id:"a-number"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#a-number"}},[t._v("#")]),t._v(" A number")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" n "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("123")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nn "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("12.345")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("The "),a("em",[t._v("number")]),t._v(" type represents both integer and floating point numbers.")]),t._v(" "),a("p",[t._v("There are many operations for numbers, e.g. multiplication "),a("code",[t._v("*")]),t._v(", division "),a("code",[t._v("/")]),t._v(", addition "),a("code",[t._v("+")]),t._v(", subtraction "),a("code",[t._v("-")]),t._v(", and so on.")]),t._v(" "),a("p",[t._v("Besides regular numbers, there are so-called “special numeric values” which also belong to this data type: "),a("code",[t._v("Infinity")]),t._v(", "),a("code",[t._v("-Infinity")]),t._v(" and "),a("code",[t._v("NaN")]),t._v(".")]),t._v(" "),a("ul",[a("li",[a("p",[a("code",[t._v("Infinity")]),t._v(" represents the mathematical "),a("a",{attrs:{href:"https://en.wikipedia.org/wiki/Infinity",target:"_blank",rel:"noopener noreferrer"}},[t._v("Infinity"),a("OutboundLink")],1),t._v(" ∞. It is a special value that’s greater than any number.")]),t._v(" "),a("p",[t._v("We can get it as a result of division by zero:")])])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("alert")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Infinity")]),t._v("\n")])])]),a("p",[t._v("Or just reference it directly:")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("alert")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("Infinity")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Infinity")]),t._v("\n")])])]),a("ul",[a("li",[a("code",[t._v("NaN")]),t._v(" represents a computational error. It is a result of an incorrect or an undefined mathematical operation, for instance:")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("alert")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"not a number"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// NaN, such division is erroneous")]),t._v("\n")])])]),a("p",[a("code",[t._v("NaN")]),t._v(" is sticky. Any further operation on "),a("code",[t._v("NaN")]),t._v(" returns "),a("code",[t._v("NaN")]),t._v(":")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("alert")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"not a number"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// NaN")]),t._v("\n")])])]),a("p",[t._v("So, if there’s a "),a("code",[t._v("NaN")]),t._v(" somewhere in a mathematical expression, it propagates to the whole result.")]),t._v(" "),a("p",[a("strong",[t._v("Mathematical operations are safe")])]),t._v(" "),a("p",[t._v("Doing maths is “safe” in JavaScript. We can do anything: divide by zero, treat non-numeric strings as numbers, etc.")]),t._v(" "),a("p",[t._v("The script will never stop with a fatal error (“die”). At worst, we’ll get "),a("code",[t._v("NaN")]),t._v(" as the result.")]),t._v(" "),a("p",[t._v("Special numeric values formally belong to the “number” type. Of course they are not numbers in the common sense of this word.")]),t._v(" "),a("p",[t._v("We’ll see more about working with numbers in the chapter "),a("a",{attrs:{href:"https://javascript.info/number",target:"_blank",rel:"noopener noreferrer"}},[t._v("Numbers"),a("OutboundLink")],1),t._v(".")]),t._v(" "),a("h2",{attrs:{id:"a-string"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#a-string"}},[t._v("#")]),t._v(" A string")]),t._v(" "),a("p",[t._v("A string in JavaScript must be surrounded by quotes.")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" str "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hello"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" str2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Single quotes are ok too"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" phrase "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token template-string"}},[a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("can embed ")]),a("span",{pre:!0,attrs:{class:"token interpolation"}},[a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("str"),a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("In JavaScript, there are 3 types of quotes.")]),t._v(" "),a("ol",[a("li",[t._v("Double quotes: "),a("code",[t._v('"Hello"')]),t._v(".")]),t._v(" "),a("li",[t._v("Single quotes: "),a("code",[t._v("'Hello'")]),t._v(".")]),t._v(" "),a("li",[t._v("Backticks: "),a("code",[t._v("Hello")]),t._v(".")])]),t._v(" "),a("p",[t._v("Double and single quotes are “simple” quotes. There’s no difference between them in JavaScript.")]),t._v(" "),a("p",[t._v("Backticks are “extended functionality” quotes. They allow us to embed variables and expressions into a string by wrapping them in "),a("code",[t._v("${…}")]),t._v(", for example:")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" name "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"John"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// embed a variable")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("alert")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token template-string"}},[a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("Hello, ")]),a("span",{pre:!0,attrs:{class:"token interpolation"}},[a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("name"),a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("!")]),a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Hello, John!")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// embed an expression")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("alert")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token template-string"}},[a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("the result is ")]),a("span",{pre:!0,attrs:{class:"token interpolation"}},[a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// the result is 3")]),t._v("\n")])])]),a("p",[t._v("The expression inside "),a("code",[t._v("${…}")]),t._v(" is evaluated and the result becomes a part of the string. We can put anything in there: a variable like "),a("code",[t._v("name")]),t._v(" or an arithmetical expression like "),a("code",[t._v("1 + 2")]),t._v(" or something more complex.")]),t._v(" "),a("p",[t._v("Please note that this can only be done in backticks. Other quotes don’t have this embedding functionality!")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("alert")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"the result is ${1 + 2}"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// the result is ${1 + 2} (double quotes do nothing)")]),t._v("\n")])])]),a("p",[t._v("We’ll cover strings more thoroughly in the chapter "),a("a",{attrs:{href:"https://javascript.info/string",target:"_blank",rel:"noopener noreferrer"}},[t._v("Strings"),a("OutboundLink")],1),t._v(".")]),t._v(" "),a("p",[a("strong",[t._v("There is no "),a("em",[t._v("character")]),t._v(" type.")])]),t._v(" "),a("p",[t._v("In some languages, there is a special “character” type for a single character. For example, in the C language and in Java it is "),a("code",[t._v("char")]),t._v(".")]),t._v(" "),a("p",[t._v("In JavaScript, there is no such type. There’s only one type: "),a("code",[t._v("string")]),t._v(". A string may consist of only one character or many of them.")]),t._v(" "),a("h2",{attrs:{id:"a-boolean-logical-type"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#a-boolean-logical-type"}},[t._v("#")]),t._v(" A boolean (logical type)")]),t._v(" "),a("p",[t._v("The boolean type has only two values: "),a("code",[t._v("true")]),t._v(" and "),a("code",[t._v("false")]),t._v(".")]),t._v(" "),a("p",[t._v("This type is commonly used to store yes/no values: "),a("code",[t._v("true")]),t._v(" means “yes, correct”, and "),a("code",[t._v("false")]),t._v(" means “no, incorrect”.")]),t._v(" "),a("p",[t._v("For instance:")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" nameFieldChecked "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// yes, name field is checkedlet")]),t._v("\nageFieldChecked "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// no, age field is not checked")]),t._v("\n")])])]),a("p",[t._v("Boolean values also come as a result of comparisons:")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" isGreater "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("alert")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("isGreater"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// true (the comparison result is "yes")')]),t._v("\n")])])]),a("p",[t._v("We’ll cover booleans more deeply in the chapter "),a("a",{attrs:{href:"https://javascript.info/logical-operators",target:"_blank",rel:"noopener noreferrer"}},[t._v("Logical operators"),a("OutboundLink")],1),t._v(".")]),t._v(" "),a("h2",{attrs:{id:"the-null-value"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#the-null-value"}},[t._v("#")]),t._v(" The “null” value")]),t._v(" "),a("p",[t._v("The special "),a("code",[t._v("null")]),t._v(" value does not belong to any of the types described above.")]),t._v(" "),a("p",[t._v("It forms a separate type of its own which contains only the "),a("code",[t._v("null")]),t._v(" value:")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" age "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("In JavaScript, "),a("code",[t._v("null")]),t._v(" is not a “reference to a non-existing object” or a “null pointer” like in some other languages.")]),t._v(" "),a("p",[t._v("It’s just a special value which represents “nothing”, “empty” or “value unknown”.")]),t._v(" "),a("p",[t._v("The code above states that "),a("code",[t._v("age")]),t._v(" is unknown or empty for some reason.")]),t._v(" "),a("h2",{attrs:{id:"the-undefined-value"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#the-undefined-value"}},[t._v("#")]),t._v(" The “undefined” value")]),t._v(" "),a("p",[t._v("The special value "),a("code",[t._v("undefined")]),t._v(" also stands apart. It makes a type of its own, just like "),a("code",[t._v("null")]),t._v(".")]),t._v(" "),a("p",[t._v("The meaning of "),a("code",[t._v("undefined")]),t._v(" is “value is not assigned”.")]),t._v(" "),a("p",[t._v("If a variable is declared, but not assigned, then its value is "),a("code",[t._v("undefined")]),t._v(":")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("alert")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// shows "undefined"')]),t._v("\n")])])]),a("p",[t._v("Technically, it is possible to assign "),a("code",[t._v("undefined")]),t._v(" to any variable:")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" x "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("123")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nx "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("undefined")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("alert")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "undefined"')]),t._v("\n")])])]),a("p",[t._v("…But we don’t recommend doing that. Normally, we use "),a("code",[t._v("null")]),t._v(" to assign an “empty” or “unknown” value to a variable, and we use "),a("code",[t._v("undefined")]),t._v(" for checks like seeing if a variable has been assigned.")]),t._v(" "),a("h2",{attrs:{id:"objects-and-symbols"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#objects-and-symbols"}},[t._v("#")]),t._v(" Objects and Symbols")]),t._v(" "),a("p",[t._v("The "),a("code",[t._v("object")]),t._v(" type is special.")]),t._v(" "),a("p",[t._v("All other types are called “primitive” because their values can contain only a single thing (be it a string or a number or whatever). In contrast, objects are used to store collections of data and more complex entities.")]),t._v(" "),a("p",[t._v("The "),a("code",[t._v("symbol")]),t._v(" type is used to create unique identifiers for objects. We mention it here for completeness, but we’ll study it after objects.")]),t._v(" "),a("h2",{attrs:{id:"the-typeof-operator"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#the-typeof-operator"}},[t._v("#")]),t._v(" The typeof operator")]),t._v(" "),a("p",[t._v("The "),a("code",[t._v("typeof")]),t._v(" operator returns the type of the argument. It’s useful when we want to process values of different types differently or just want to do a quick check.")]),t._v(" "),a("p",[t._v("It supports two forms of syntax:")]),t._v(" "),a("ol",[a("li",[t._v("As an operator: "),a("code",[t._v("typeof x")]),t._v(".")]),t._v(" "),a("li",[t._v("As a function: "),a("code",[t._v("typeof(x)")]),t._v(".")])]),t._v(" "),a("p",[t._v("In other words, it works with parentheses or without them. The result is the same.")]),t._v(" "),a("p",[t._v("The call to "),a("code",[t._v("typeof x")]),t._v(" returns a string with the type name:")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("undefined")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "undefined"')]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "number"')]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "boolean"')]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"foo"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "string"')]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Symbol")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"id"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "symbol"')]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" Math"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "object"  (1)')]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "object"  (2)')]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" alert"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "function"  (3)')]),t._v("\n")])])]),a("p",[t._v("The last three lines may need additional explanation:")]),t._v(" "),a("ol",[a("li",[a("code",[t._v("Math")]),t._v(" is a built-in object that provides mathematical operations.")]),t._v(" "),a("li",[t._v("The result of "),a("code",[t._v("typeof null")]),t._v(" is "),a("code",[t._v('"object"')]),t._v(". That’s wrong. It is an officially recognized error in "),a("code",[t._v("typeof")]),t._v(", kept for compatibility. Of course, "),a("code",[t._v("null")]),t._v(" is not an object. It is a special value with a separate type of its own. So, again, this is an error in the language.")]),t._v(" "),a("li",[t._v("The result of "),a("code",[t._v("typeof alert")]),t._v(" is "),a("code",[t._v('"function"')]),t._v(", because "),a("code",[t._v("alert")]),t._v(" is a function. We’ll study functions in the next chapters where we’ll also see that there’s no special “function” type in JavaScript. Functions belong to the object type. But "),a("code",[t._v("typeof")]),t._v(" treats them differently, returning "),a("code",[t._v('"function"')]),t._v(". That’s not quite correct, but very convenient in practice.")])]),t._v(" "),a("h2",{attrs:{id:"summary"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#summary"}},[t._v("#")]),t._v(" Summary")]),t._v(" "),a("p",[t._v("There are 7 basic data types in JavaScript.")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("number")]),t._v(" for numbers of any kind: integer or floating-point.")]),t._v(" "),a("li",[a("code",[t._v("string")]),t._v(" for strings. A string may have one or more characters, there’s no separate single-character type.")]),t._v(" "),a("li",[a("code",[t._v("boolean")]),t._v(" for "),a("code",[t._v("true")]),t._v("/"),a("code",[t._v("false")]),t._v(".")]),t._v(" "),a("li",[a("code",[t._v("null")]),t._v(" for unknown values – a standalone type that has a single value "),a("code",[t._v("null")]),t._v(".")]),t._v(" "),a("li",[a("code",[t._v("undefined")]),t._v(" for unassigned values – a standalone type that has a single value "),a("code",[t._v("undefined")]),t._v(".")]),t._v(" "),a("li",[a("code",[t._v("object")]),t._v(" for more complex data structures.")]),t._v(" "),a("li",[a("code",[t._v("symbol")]),t._v(" for unique identifiers.")])]),t._v(" "),a("p",[t._v("The "),a("code",[t._v("typeof")]),t._v(" operator allows us to see which type is stored in a variable.")]),t._v(" "),a("ul",[a("li",[t._v("Two forms: "),a("code",[t._v("typeof x")]),t._v(" or "),a("code",[t._v("typeof(x)")]),t._v(".")]),t._v(" "),a("li",[t._v("Returns a string with the name of the type, like "),a("code",[t._v('"string"')]),t._v(".")]),t._v(" "),a("li",[t._v("For "),a("code",[t._v("null")]),t._v(" returns "),a("code",[t._v('"object"')]),t._v(" – this is an error in the language, it’s not actually an object.")])])])}),[],!1,null,null,null);e.default=n.exports}}]);